import XMonad
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Util.Run(spawnPipe,hPutStrLn)
import XMonad.Util.EZConfig(additionalKeys)
import System.IO
import XMonad.Layout.TabBarDecoration
--import XMonad.Layout.Tabbed
--import XMonad.Hooks.ManageHelpers (isFullscreen,  doFullFloat, doCenterFloat)


import XMonad.Hooks.ManageDocks
import XMonad.Layout.NoBorders (smartBorders)
import XMonad.Layout.DragPane
import XMonad.Layout.LayoutCombinators hiding ((|||))
import XMonad.Layout.Tabbed
import XMonad.Util.Themes
import Data.List
--import qualified XMonad.StackSet as W


import XMonad.Prompt                -- (23) general prompt stuff.
import XMonad.Prompt.Ssh
import XMonad.Prompt.Layout
import XMonad.Prompt.Man            -- (24) man page prompt
import XMonad.Prompt.AppendFile     -- (25) append stuff to my NOTES file
import XMonad.Prompt.Shell          -- (26) shell prompt
import XMonad.Prompt.Input          -- (27) generic input prompt, used for
                                    --      making more generic search
				    --                                          --      prompts than those in
				    --                                                                              --      XMonad.Prompt.Search
import XMonad.Prompt.RunOrRaise

myManageHook = composeAll
    [ className =? "Gimp"      --> doFloat
    -- className =? "Gimp"  --> doShift "*" -- may be "Gimp" or "Gimp-2.4" instead
    --, (className =? "Gimp" <&&> fmap ("tool" `isSuffixOf`) role) --> doFloat
    , className =? "Vncviewer" --> doFloat
    , title     =? "Save a Bookmark" --> doFloat
    , title     =? "Edit Bookmark" --> doFloat
    , title     =? "Firefox - Choose User Profile" --> doFloat
    , title     =? "Firefox - Restore Previous Session" --> doFloat
    , title     =? "Create a New Image" --> doFloat
    ]
    --   <+> doFloat <+> manageDocks
    --       where unfloat = ask >>= doF . W.sink
    --	           role = stringProperty "WM_WINDOW_ROLE"

-- mylayout = avoidStruts (simpleTabBar ||| Full)
 --- where
     -- default tiling algorithm partitions the screen into two panes
 --    tiled   = Tall nmaster delta ratio
     -- The default number of windows in the master pane
 --    nmaster = 1
     -- Default proportion of screen occupied by master pane
  --   ratio   = 2/3
     -- Percent of screen to increment by when resizing panes
--     delta   = 3/100

--main = xmonad defaultConfig { layoutHook = simpleTabBar $ layoutHook defaultConfig}


myTabConfig = defaultTheme { inactiveBorderColor = "#FF0000"
                                    , activeTextColor = "#00FF00"}


myLayoutHook = avoidStruts . smartBorders $
    Tall 1 (3 / 100) (1 / 2) ||| tabbedLayout ||| Full ||| gimpLayout ||| gimpLayout22
  where
    tabbedLayout = tabbedBottomAlways shrinkText (theme wfarrTheme)
    gimpLayout = tabbedLayout |||  Full
    gimpLayout22 = Full ****||* tabbedLayout 


--myLayouts = simpleTabbedBottomAlways ||| tabbedLayout ||| Full
--  where
--    tabbedLayout = tabbedBottomAlways shrinkText defaultTheme


main = do
    xmproc <- spawnPipe "/usr/bin/xmobar /home/homoludens/.xmobarrc"
    xmonad $ defaultConfig
        { manageHook = manageDocks <+> myManageHook
                        <+> manageHook defaultConfig
	, layoutHook = myLayoutHook
--	, workspaces = ["a","b","c","d","e","f","g","*","i"]
--      , layoutHook = avoidStruts  $  layoutHook defaultConfig
	, logHook = dynamicLogWithPP $ xmobarPP
                        { ppOutput = hPutStrLn xmproc
                        , ppTitle = xmobarColor "green" "" . shorten 50
                        }
        , modMask       	= mod1Mask
	, terminal = "urxvt"
	, focusFollowsMouse  = False
        }`additionalKeys`
        [ ((mod4Mask .|. shiftMask, xK_z), spawn "xscreensaver-command -lock")
        , ((0, xK_Print), spawn "ksnapshot")
       , ((mod1Mask, xK_x), runOrRaisePrompt defaultXPConfig)
      -- , ((0, xK_Print), runOrRaisePrompt defaultXPConfig)
      ]
